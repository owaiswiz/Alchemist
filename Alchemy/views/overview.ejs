<!DOCTYPE html>
<html>
  <head>

    <meta charset="utf-8">
    <link rel="stylesheet" href="stylesheets/d3Style.css">
    <script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>
    <script src="https://cdn.rawgit.com/ethereum/web3.js/develop/dist/web3.js"></script>

    <script src="javascripts/ethereum.js" charset="utf-8"></script>

  </head>
  <body>
    <!-- particles.js container -->

    <div class="container-capsule" style="text-align: center">
      <h1>Capsule</h1>
      <h2>Caring for Health Records Since 2hrs</h2>
    </div>

    <div id="canvas"></div>
    <div id="particles-js"></div>

    <!-- stats - count particles -->
    <div class="count-particles">
      <span class="js-count-particles">--</span> particles
    </div>

    <!-- particles.js lib (JavaScript CodePen settings): https://github.com/VincentGarreau/particles.js -->
    <script src='https://cdn.jsdelivr.net/particles.js/2.0.0/particles.min.js'></script>
    <script src='https://threejs.org/examples/js/libs/stats.min.js'></script>
    <script  src="javascripts/particleJsConfig.js"></script>
    <script>
      // custom d3 javascript

// data comes from uploaded data to vida.io
// if you have your own data, overwrite its value
// drawing area is #canvas, define var svg = d3.select("#canvas")


var WIDTH = 800, HEIGHT = 600;

var width = WIDTH,
  height = HEIGHT;

var color = d3.scale.category20();

var radius = d3.scale.sqrt()
  .range([0, 6]);

var svg = d3.select("#canvas").append("svg")
  .attr("width", width)
  .attr("height", height)
  .attr("position",'center');

var force = d3.layout.force()
  .size([width, height])
  .charge(-400)
  .linkDistance(function(d) { return radius(d.source.size) + radius(d.target.size) + 20; });

//var graph;
//d3.json("data.json", function(d) {
var graph = {
  "nodes": [],
  "links": []
};

//var  graph = {
//  "nodes": [
//    {
//      "atom": "#7df89vhsd",
//      "size": 50
//    },
//    {
//      "atom": "#hysdhsdis",
//      "size": 80
//    },
//    {
//      "atom": "#hjfwhefu5",
//      "size": 100
//    },
//    {
//      "atom": "#sdih8y3r",
//      "size": 70
//    },
//    {
//      "atom": "#Hshvbs7d",
//      "size": 90
//    }
//  ],
//  "links": [
//    {
//      "source": 0,
//      "target": 1,
//      "bond": 1
//    },
//    {
//      "source": 1,
//      "target": 2,
//      "bond": 1
//    },
//    {
//      "source": 2,
//      "target": 3,
//      "bond": 1
//    },
//    {
//      "source": 3,
//      "target": 4,
//      "bond": 1
//    }
//  ]
//};
// 
//graph.nodes.push({
//      "atom": "#pratik",
//      "size": 120
//    });
//graph.links.push({
//      "source": 4,
//      "target": 5,
//      "bond": 2
//    });

var hashes_dict = ["#shdbfh","#sfgsidfj","#hdsbfsf","#idhbfd","#hbdfdfd"];
var hashes_dict_len = Capsule.block_no();
for (var i = 0; i < hashes_dict_len; i++) {
    graph.nodes.push({
      "atom": hashes_dict[i%hashes_dict.length],
      "size": Math.floor(Math.random() * 40) + 40
    });
  if(i != hashes_dict_len-1){
    graph.links.push({
      "source": i,
      "target": i+1,
      "bond": 1
    });
  }
}


console.log(graph.links);

force
  .nodes(graph.nodes)
  .links(graph.links)
  .on("tick", tick)
  .start();

var link = svg.selectAll(".link")
  .data(graph.links)
  .enter().append("g")
  .attr("class", "link");

link.append("line")
  .style("stroke-width", function(d) { return (d.bond * 2 - 1) * 2 + "px"; });

link.filter(function(d) { return d.bond > 1; }).append("line")
  .attr("class", "separator");

var node = svg.selectAll(".node")
  .data(graph.nodes)
  .enter().append("g")
  .attr("class", "node")
  .call(force.drag);

node.append("circle")
  .attr("r", function(d) { return radius(d.size); })
  .style("fill", function(d) { return color(d.atom); });

node.append("text")
  .attr("dy", ".35em")
  .attr("text-anchor", "middle")
  .text(function(d) { return d.atom; });

function tick() {
  link.selectAll("line")
    .attr("x1", function(d) { return d.source.x; })
    .attr("y1", function(d) { return d.source.y; })
    .attr("x2", function(d) { return d.target.x; })
    .attr("y2", function(d) { return d.target.y; });

  node.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
}

//});
    </script>
  </body>
</html>

